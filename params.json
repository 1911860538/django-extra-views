{"name":"Django-extra-views","body":"# Introduction.\r\n\r\n**django-extra-views** is a library that primarily provides formset class-based views to complement Django's existing suite of class-based generic views. I have mimicked the API of Django's views as closely as possible.\r\n\r\n## Installation (PyPI):\r\n\r\n```\r\n$ pip install django-extra-views\r\n```\r\n\r\n## Usage\r\n\r\n### A simple formset\r\n\r\n```\r\nfrom extra_views import FormSetView\r\nfrom foo.forms import MyForm    \r\n\r\nclass MyFormSetView(FormSetView):\r\n    template_name = 'myformset.html'\r\n    form_class = MyForm\r\n    success_url = 'success/'\r\n\r\n    def get_initial_data(self):\r\n        # return whatever you'd normally use as the initial data for your formset.\r\n      return data\r\n\r\n    def formset_valid(self, formset):\r\n        # do stuff\r\n        return super(MyFormSetView, self).formset_valid(formset)\r\n```\r\n\r\nThis view will render the template `myformset.html` with a context variable `formset` representing the formset of MyForm. Once POSTed and successfully validated, `formset_valid` will be called which is where your handling logic goes, then it redirects to `success_url`.\r\n\r\n### Additional configuration\r\n\r\nFormSetView exposes all the parameters you'd normally be able to pass to formset_factory. Example (using the default settings):\r\n\r\n```\r\nclass MyFormSetView(FormSetView):\r\n    template_name = 'myformset.html'\r\n    form_class = MyForm\r\n    success_url = 'success/'\r\n    extra = 2\r\n    max_num = None\r\n    can_order = False\r\n    can_delete = False\r\n\r\n    ...\r\n```\r\n\r\n### Using models (ModelFormSetView)\r\n\r\nModelFormSetView makes use of Django's modelformset_factory, using the declarative syntax used in FormSetView as well as Django's own class-based views. So as you'd expect, the simplest usage is as follows:\r\n\r\n```\r\nfrom extra_views import ModelFormSetView\r\nfrom foo.models import MyModel\r\n\r\nclass MyModelFormSetView(ModelFormSetView):\r\n    template_name = 'mymodelformset.html'\r\n    model = MyModel\r\n```\r\n\r\nLike `FormSetView`, the `formset` variable is made available in the template context. By default this will populate the formset with all the instances of `MyModel` in the database. You can control this by overriding `get_queryset` on the class, which could filter on a URL kwarg (`self.kwargs`), for example.\r\n\r\n```\r\nclass MyModelFormSetView(ModelFormSetView):\r\n    template_name = 'mymodelformset.html'\r\n    model = MyModel\r\n\r\n    def get_queryset(self):\r\n        slug = self.kwargs['slug']\r\n        return super(MyModelFormSetView, self).get_queryset().filter(slug=slug)\r\n```\r\n\r\nAs you'd expect, you can specify `fields` and `exclude` to control which fields are made available in the generated ModelForms. Of course, you can always specify form_class if you want more control.\r\n\r\nUnlike `FormSetView`, which by default does nothing except a redirect after a valid formset, `ModelFormSetView` handles the saving of the models by calling the save method on the formset. Here is the full default behaviour of `formset_valid`.\r\n\r\n```\r\ndef formset_valid(self, formset):\r\n    self.object_list = formset.save()\r\n    return super(ModelFormSetMixin, self).formset_valid(formset)\r\n```\r\n\r\nSo if you do override this method, you'll need to make sure this behaviour is preserved (or provide a suitable alternative).\r\n\r\n### InlineFormSetView\r\n\r\nWhen you want to edit models related to a parent model (using a ForeignKey), you'll want to use InlineFormSetView. An example use case would be editing user reviews related to a product:\r\n\r\n```\r\nclass EditProductReviewsView(InlineFormSetView):\r\n    model = Product\r\n    inline_model = Review\r\n\r\n    ...\r\n```\r\n\r\nAside from the use of `model` and `inline_model`, InlineFormSetView works more-or-less in the same way as ModelFormSetView\r\n\r\n### GenericInlineFormSetView\r\n\r\nYou can also use generic relationships for your inline formsets, this makes use of Django's `generic_inlineformset_factory`. The usage is the same, but with the addition of `ct_field` and `ct_fk_field`:\r\n\r\n```\r\nclass EditProductReviewsView(GenericInlineFormSetView):\r\n    model = Product\r\n    inline_model = Review\r\n    ct_field = \"content_type\"\r\n    ct_fk_field = \"object_id\"\r\n\r\n    ....\r\n```\r\n\r\n### CreateWithInlinesView and UpdateWithInlinesView\r\n\r\nThese are the most powerful views in the library, they are effectively replacements for Django's own CreateView and UpdateView. The key difference is that they let you include any number of inline formsets (as well as the parent model's form), this provides functionality much like the Django Admin change forms. The API should be fairly familiar as well.","tagline":"Django's class-based generic views are awesome, let's have more of them.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}